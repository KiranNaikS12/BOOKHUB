<%- include('../userLayout/header') %>
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet"/>
<style>
    .table-border th{
        border: 1px solid black;
    }
    .bill-table tr td{
        border: 1px solid black;
    }
    .form-check-input[type=radio],
    .form-check-input[type=checkbox] {
        width: 22px; 
        height: 22px;
        margin-top: 0.2rem;
    }

    .form-check-input[type=checkbox] {
        width: 16px; 
        height: 16px;
    }

    .form-check-label {
        margin-left: 0.5rem;
    }
</style>
    <main class="main">
        <div class="page-header breadcrumb-wrap">
            <div class="container">
                <div class="breadcrumb">
                    <a href="#" rel="nofollow">Home</a>
                    <span></span> Shop
                    <span></span> Checkout
                </div>
            </div>
        </div>
        <section class="mt-50 mb-50">
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <div class="order_review">
                            <div class="mb-20">
                                <h4 class="text-white text-center" style="background-color: #000; padding: 5px;">YOUR ORDER</h4>
                            </div>
                            <div class="table-responsive order_table text-center">
                                <table class="table">
                                    <thead>
                                        <tr class="table-border">
                                            <th>Image</th>
                                            <th colspan="1">Product</th>
                                            <th>Total</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% if (cart.items.length > 0) { %>
                                            <% cart.items.forEach((item,index) => { %>
                                                <tr>
                                                    <td class="image product-thumbnail">
                                                        <img src="/assets-admin/productImages/<%= item.image[item.image.length -1] %>" alt="#">
                                                        <% if (item.data.countInStock <= 10) { %>
                                                            <p class="font-xs text-danger" id="countInStock-<%= item.data._id %>">Only <%= item.data.countInStock %> left</p>
                                                        <% } else if (item.data.countInStock >= 10) { %>
                                                            <p class="font-xs text-info" id="countInStock-<%= item.data._id %>">stocks available</p>
                                                        <% } %>
                                                    </td>
                                                    <td>
                                                        <h5><a href="#"><%= item.data.title %></a></h5>Qunatity:<div class="cart-product-quantity" style="width: 70px; margin: 0 auto;">
                                                            <input type="number" class="form-control black-border  black-spin-buttons" style="background-color: aliceblue; padding: -10px;" id="quantity-<%= item.data._id %>" value="<%= item.quantity %>" min="1" max="6" step="1" data-decimals="0" required onchange="updateInQuantity('<%= item.data._id %>', '<%= user._id %>', this.value)">
                                                        </div>
                                                    </td>
                                                    <td id="price-<%= item.data._id %>">Rs.<%= item.price.toFixed(2) %>/-</td>
                                                    <td class="action" data-title="Remove">
                                                        <a href="#" class="text-muted" onclick="removeProductFromOrder('<%= item.data._id %>','<%= user._id %>')">
                                                            Remove<i class="fi-rs-trash"></i>
                                                        </a>
                                                    </td>  
                                                </tr>
                                           <% }) %>
                                        <% } %>
                                    </tbody>                                    
                                </table>
                                <div class="table-responsive">
                                    <table class="table">
                                            <tbody class="bill-table">
                                                <tr>
                                                    <td class="cart_total_label">Cart Subtotal</td>
                                                    <td class="cart_total_amount">
                                                        <span class="font-lg fw-900 text-dark" id="billTotal">Rs.<%= cart.billTotal.toFixed(2) %>/-</span>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td class="cart_total_label">Shipping Charge</td>
                                                    <td class="cart_total_amount" id="shipping"> <i class="ti-gift mr-5"></i> Free Shipping</td>
                                                </tr>
                                                <tr>
                                                    <td class="cart_total_label">Total Amount</td>
                                                    <td class="cart_total_amount">
                                                        <span class="font-lg fw-900 text-dark" id="totalAmount">Rs.<%=cart.billTotal.toFixed(2) %>/-</span>
                                                    </td>
                                                </tr>
                                            </tbody>
                                    </table>
                                </div>
                            </div>
                                            
                        </div>
                        <div class="bt-1 border-color-1 mt-30 mb-30"></div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="toggle_info">
                                        <span><i class="fi-rs-label mr-30"></i><span class="text-muted">Have a coupon?</span> <a href="#coupon" data-bs-toggle="collapse" class="collapsed" aria-expanded="false">Click here to enter your code</a></span>
                                    </div>
                                    <div class="panel-collapse collapse coupon_form " id="coupon">
                                        <div class="panel-body">
                                            <p class="mb-30 font-sm">If you have a coupon code, please apply it below.</p>
                                            <form method="post" onsubmit="applycoupon(); return false">
                                                <div class="form-group">
                                                    <input type="text" name="coupon" placeholder="Enter Coupon Code...">
                                                </div>
                                                <div class="form-group">
                                                    <button class="btn  btn-md" name="Apply">Apply Coupon</button>
                                                </div>
                                            </form>
                                            <a href="/coupon"><strong>View available Coupons</strong></a>
                                        </div>
                                    </div>
                                </div>
                            </div> 
                    </div>
                    <div class="col-md-6">
                        <div class="mb-25">
                            <h4 class="text-white text-center" style="background-color: #000; padding: 5px;">BILLING DETAILS</h4>
                        </div>
                            <div class="form-group">
                                <label for="fname">First Name:</label>
                                <input type="text" required="" name="fname" placeholder="First name *" value="<%= user.firstname %>" readonly>
                            </div>
                            <div class="form-group">
                                <label for="fname">First Name:</label>
                                <input type="text" required="" name="lname" placeholder="Last name *" value="<%= user.lastname %>" readonly>
                            </div>
                            <div class="form-group">
                                <label for="fname">Email Address:</label>
                                <input type="text" required="" name="email"  value="<%= user.email %>" readonly>
                            </div>
                            <div class="form-group">
                                <label for="fname">Phone:</label>
                                <input required="" type="text" name="mobile" value="+91-<%= user.mobile %>" readonly>
                            </div>                     
                            <form id="orderForm" method="POST" onsubmit="return validateCheckoutForm()">
                                <div class="form-group">
                                    <label for="additionalMobile">Additional Phone:</label>
                                    <input  type="text" name="additionalMobile" placeholder="Additional phone number" id="additionalMobile">
                                </div>  
                                <div class="row">
                                    <div class="col-lg-6">
                                        <div class="toggle_info">
                                            <% if (user.address && user.address.length > 0) { %>
                                            <span><i class="fi-rs-label mr-10"></i><span class="text-muted">Use current Address</span> <a href="" data-bs-toggle="collapse" class="collapsed" aria-expanded="false"><br>
                                                Address:  Street: <%= user.address[user.address.length-1].street %>, <%= user.address[user.address.length-1].city %>, <br>Country: <%= user.address[user.address.length-1].country %>
                                                <br>
                                                Pin:<%= user.address[user.address.length-1].postalCode %>,(<%= user.address[user.address.length-1].type %>)
                                            </a></span>
                                            <% } else { %>
                                                <p>Add Shipping Address Before You Procced</p>
                                        <% } %>
                                        </div>
                                    </div>
                                </div>            
                                <div class="ship_detail">
                                    <div class="form-group">
                                        <div class="chek-form">
                                            <div class="custome-checkbox">
                                                <input class="form-check-input" type="checkbox" name="shippingAddress" id="shippingAddress">
                                                <label class="form-check-label label_info" data-bs-toggle="collapse" data-target="#collapseAddress" href="#collapseAddress" aria-controls="collapseAddress" for="shippingAddress"><span>Ship to a different address?</span></label>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="collapseAddress" class="shipping_address collapse in">
                                        <div class="form-group">
                                            <input type="text"  name="street" placeholder="Enter Street Name" required>
                                        </div>
                                        <div class="form-group">
                                            <input type="text" name="city" placeholder="Enter City" required >
                                        </div>
                                        <div class="form-group">
                                            <input  type="text" name="state" placeholder="Enter State" required>
                                        </div>
                                        <div class="form-group">
                                            <div class="custom_select">
                                                <select class="form-control select-active" name="country">
                                                    <option value="">Select Country......</option>
                                                    <option value="AX">Aland Islands</option>
                                                    <option value="AF">Afghanistan</option>
                                                    <option value="AL">Albania</option>
                                                    <option value="DZ">Algeria</option>
                                                    <option value="AD">Andorra</option>
                                                    <option value="AO">Angola</option>
                                                    <option value="AI">Anguilla</option>
                                                    <option value="AQ">Antarctica</option>
                                                    <option value="AG">Antigua and Barbuda</option>
                                                    <option value="AR">Argentina</option>
                                                    <option value="AM">Armenia</option>
                                                    <option value="AW">Aruba</option>
                                                    <option value="AU">Australia</option>
                                                    <option value="AT">Austria</option>
                                                    <option value="AZ">Azerbaijan</option>
                                                    <option value="BS">Bahamas</option>
                                                    <option value="BH">Bahrain</option>
                                                    <option value="BD">Bangladesh</option>
                                                    <option value="BB">Barbados</option>
                                                    <option value="BY">Belarus</option>
                                                    <option value="PW">Belau</option>
                                                    <option value="BE">Belgium</option>
                                                    <option value="BZ">Belize</option>
                                                    <option value="BJ">Benin</option>
                                                    <option value="BM">Bermuda</option>
                                                    <option value="BT">Bhutan</option>
                                                    <option value="BO">Bolivia</option>
                                                    <option value="BQ">Bonaire, Saint Eustatius and Saba</option>
                                                    <option value="BA">Bosnia and Herzegovina</option>
                                                    <option value="BW">Botswana</option>
                                                    <option value="BV">Bouvet Island</option>
                                                    <option value="BR">Brazil</option>
                                                    <option value="IO">British Indian Ocean Territory</option>
                                                    <option value="VG">British Virgin Islands</option>
                                                    <option value="BN">Brunei</option>
                                                    <option value="BG">Bulgaria</option>
                                                    <option value="BF">Burkina Faso</option>
                                                    <option value="BI">Burundi</option>
                                                    <option value="KH">Cambodia</option>
                                                    <option value="CM">Cameroon</option>
                                                    <option value="CA">Canada</option>
                                                    <option value="CV">Cape Verde</option>
                                                    <option value="KY">Cayman Islands</option>
                                                    <option value="CF">Central African Republic</option>
                                                    <option value="TD">Chad</option>
                                                    <option value="CL">Chile</option>
                                                    <option value="CN">China</option>
                                                    <option value="CX">Christmas Island</option>
                                                    <option value="CC">Cocos (Keeling) Islands</option>
                                                    <option value="CO">Colombia</option>
                                                    <option value="KM">Comoros</option>
                                                    <option value="CG">Congo (Brazzaville)</option>
                                                    <option value="CD">Congo (Kinshasa)</option>
                                                    <option value="CK">Cook Islands</option>
                                                    <option value="CR">Costa Rica</option>
                                                    <option value="HR">Croatia</option>
                                                    <option value="CU">Cuba</option>
                                                    <option value="CW">CuraÇao</option>
                                                    <option value="CY">Cyprus</option>
                                                    <option value="CZ">Czech Republic</option>
                                                    <option value="DK">Denmark</option>
                                                    <option value="DJ">Djibouti</option>
                                                    <option value="DM">Dominica</option>
                                                    <option value="DO">Dominican Republic</option>
                                                    <option value="EC">Ecuador</option>
                                                    <option value="EG">Egypt</option>
                                                    <option value="SV">El Salvador</option>
                                                    <option value="GQ">Equatorial Guinea</option>
                                                    <option value="ER">Eritrea</option>
                                                    <option value="EE">Estonia</option>
                                                    <option value="ET">Ethiopia</option>
                                                    <option value="FK">Falkland Islands</option>
                                                    <option value="FO">Faroe Islands</option>
                                                    <option value="FJ">Fiji</option>
                                                    <option value="FI">Finland</option>
                                                    <option value="FR">France</option>
                                                    <option value="GF">French Guiana</option>
                                                    <option value="PF">French Polynesia</option>
                                                    <option value="TF">French Southern Territories</option>
                                                    <option value="GA">Gabon</option>
                                                    <option value="GM">Gambia</option>
                                                    <option value="GE">Georgia</option>
                                                    <option value="DE">Germany</option>
                                                    <option value="GH">Ghana</option>
                                                    <option value="GI">Gibraltar</option>
                                                    <option value="GR">Greece</option>
                                                    <option value="GL">Greenland</option>
                                                    <option value="GD">Grenada</option>
                                                    <option value="GP">Guadeloupe</option>
                                                    <option value="GT">Guatemala</option>
                                                    <option value="GG">Guernsey</option>
                                                    <option value="GN">Guinea</option>
                                                    <option value="GW">Guinea-Bissau</option>
                                                    <option value="GY">Guyana</option>
                                                    <option value="HT">Haiti</option>
                                                    <option value="HM">Heard Island and McDonald Islands</option>
                                                    <option value="HN">Honduras</option>
                                                    <option value="HK">Hong Kong</option>
                                                    <option value="HU">Hungary</option>
                                                    <option value="IS">Iceland</option>
                                                    <option value="IN">India</option>
                                                    <option value="ID">Indonesia</option>
                                                    <option value="IR">Iran</option>
                                                    <option value="IQ">Iraq</option>
                                                    <option value="IM">Isle of Man</option>
                                                    <option value="IL">Israel</option>
                                                    <option value="IT">Italy</option>
                                                    <option value="CI">Ivory Coast</option>
                                                    <option value="JM">Jamaica</option>
                                                    <option value="JP">Japan</option>
                                                    <option value="JE">Jersey</option>
                                                    <option value="JO">Jordan</option>
                                                    <option value="KZ">Kazakhstan</option>
                                                    <option value="KE">Kenya</option>
                                                    <option value="KI">Kiribati</option>
                                                    <option value="KW">Kuwait</option>
                                                    <option value="KG">Kyrgyzstan</option>
                                                    <option value="LA">Laos</option>
                                                    <option value="LV">Latvia</option>
                                                    <option value="LB">Lebanon</option>
                                                    <option value="LS">Lesotho</option>
                                                    <option value="LR">Liberia</option>
                                                    <option value="LY">Libya</option>
                                                    <option value="LI">Liechtenstein</option>
                                                    <option value="LT">Lithuania</option>
                                                    <option value="LU">Luxembourg</option>
                                                    <option value="MO">Macao S.A.R., China</option>
                                                    <option value="MK">Macedonia</option>
                                                    <option value="MG">Madagascar</option>
                                                    <option value="MW">Malawi</option>
                                                    <option value="MY">Malaysia</option>
                                                    <option value="MV">Maldives</option>
                                                    <option value="ML">Mali</option>
                                                    <option value="MT">Malta</option>
                                                    <option value="MH">Marshall Islands</option>
                                                    <option value="MQ">Martinique</option>
                                                    <option value="MR">Mauritania</option>
                                                    <option value="MU">Mauritius</option>
                                                    <option value="YT">Mayotte</option>
                                                    <option value="MX">Mexico</option>
                                                    <option value="FM">Micronesia</option>
                                                    <option value="MD">Moldova</option>
                                                    <option value="MC">Monaco</option>
                                                    <option value="MN">Mongolia</option>
                                                    <option value="ME">Montenegro</option>
                                                    <option value="MS">Montserrat</option>
                                                    <option value="MA">Morocco</option>
                                                    <option value="MZ">Mozambique</option>
                                                    <option value="MM">Myanmar</option>
                                                    <option value="NA">Namibia</option>
                                                    <option value="NR">Nauru</option>
                                                    <option value="NP">Nepal</option>
                                                    <option value="NL">Netherlands</option>
                                                    <option value="AN">Netherlands Antilles</option>
                                                    <option value="NC">New Caledonia</option>
                                                    <option value="NZ">New Zealand</option>
                                                    <option value="NI">Nicaragua</option>
                                                    <option value="NE">Niger</option>
                                                    <option value="NG">Nigeria</option>
                                                    <option value="NU">Niue</option>
                                                    <option value="NF">Norfolk Island</option>
                                                    <option value="KP">North Korea</option>
                                                    <option value="NO">Norway</option>
                                                    <option value="OM">Oman</option>
                                                    <option value="PK">Pakistan</option>
                                                    <option value="PS">Palestinian Territory</option>
                                                    <option value="PA">Panama</option>
                                                    <option value="PG">Papua New Guinea</option>
                                                    <option value="PY">Paraguay</option>
                                                    <option value="PE">Peru</option>
                                                    <option value="PH">Philippines</option>
                                                    <option value="PN">Pitcairn</option>
                                                    <option value="PL">Poland</option>
                                                    <option value="PT">Portugal</option>
                                                    <option value="QA">Qatar</option>
                                                    <option value="IE">Republic of Ireland</option>
                                                    <option value="RE">Reunion</option>
                                                    <option value="RO">Romania</option>
                                                    <option value="RU">Russia</option>
                                                    <option value="RW">Rwanda</option>
                                                    <option value="ST">São Tomé and Príncipe</option>
                                                    <option value="BL">Saint Barthélemy</option>
                                                    <option value="SH">Saint Helena</option>
                                                    <option value="KN">Saint Kitts and Nevis</option>
                                                    <option value="LC">Saint Lucia</option>
                                                    <option value="SX">Saint Martin (Dutch part)</option>
                                                    <option value="MF">Saint Martin (French part)</option>
                                                    <option value="PM">Saint Pierre and Miquelon</option>
                                                    <option value="VC">Saint Vincent and the Grenadines</option>
                                                    <option value="SM">San Marino</option>
                                                    <option value="SA">Saudi Arabia</option>
                                                    <option value="SN">Senegal</option>
                                                    <option value="RS">Serbia</option>
                                                    <option value="SC">Seychelles</option>
                                                    <option value="SL">Sierra Leone</option>
                                                    <option value="SG">Singapore</option>
                                                    <option value="SK">Slovakia</option>
                                                    <option value="SI">Slovenia</option>
                                                    <option value="SB">Solomon Islands</option>
                                                    <option value="SO">Somalia</option>
                                                    <option value="ZA">South Africa</option>
                                                    <option value="GS">South Georgia/Sandwich Islands</option>
                                                    <option value="KR">South Korea</option>
                                                    <option value="SS">South Sudan</option>
                                                    <option value="ES">Spain</option>
                                                    <option value="LK">Sri Lanka</option>
                                                    <option value="SD">Sudan</option>
                                                    <option value="SR">Suriname</option>
                                                    <option value="SJ">Svalbard and Jan Mayen</option>
                                                    <option value="SZ">Swaziland</option>
                                                    <option value="SE">Sweden</option>
                                                    <option value="CH">Switzerland</option>
                                                    <option value="SY">Syria</option>
                                                    <option value="TW">Taiwan</option>
                                                    <option value="TJ">Tajikistan</option>
                                                    <option value="TZ">Tanzania</option>
                                                    <option value="TH">Thailand</option>
                                                    <option value="TL">Timor-Leste</option>
                                                    <option value="TG">Togo</option>
                                                    <option value="TK">Tokelau</option>
                                                    <option value="TO">Tonga</option>
                                                    <option value="TT">Trinidad and Tobago</option>
                                                    <option value="TN">Tunisia</option>
                                                    <option value="TR">Turkey</option>
                                                    <option value="TM">Turkmenistan</option>
                                                    <option value="TC">Turks and Caicos Islands</option>
                                                    <option value="TV">Tuvalu</option>
                                                    <option value="UG">Uganda</option>
                                                    <option value="UA">Ukraine</option>
                                                    <option value="AE">United Arab Emirates</option>
                                                    <option value="GB">United Kingdom (UK)</option>
                                                    <option value="US">USA (US)</option>
                                                    <option value="UY">Uruguay</option>
                                                    <option value="UZ">Uzbekistan</option>
                                                    <option value="VU">Vanuatu</option>
                                                    <option value="VA">Vatican</option>
                                                    <option value="VE">Venezuela</option>
                                                    <option value="VN">Vietnam</option>
                                                    <option value="WF">Wallis and Futuna</option>
                                                    <option value="EH">Western Sahara</option>
                                                    <option value="WS">Western Samoa</option>
                                                    <option value="YE">Yemen</option>
                                                    <option value="ZM">Zambia</option>
                                                    <option value="ZW">Zimbabwe</option>
                                                </select>
                                            </div>
                                          </div>
                                        <div class="form-group">
                                            <input type="number" name="postalCode"  placeholder="Enter postal code" required>
                                        </div>
                                        <div class="form-group">
                                            <label for="addressType">Address Type</label><br>
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="addressType" id="homeRadio" value="home" required>
                                                <label class="form-check-label" for="homeRadio">Home</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" name="addressType" id="workRadio" value="work" required>
                                                <label class="form-check-label" for="workRadio">Work</label>
                                            </div>
                                            <div id="addressTypeError" class="error" style="color: red;"></div>
                                        </div>
                                    </div>
                                </div>
                            
                                <div class="mb-20">
                                    <h5>Additional information</h5>
                                </div>
                                <div class="form-group mb-30">
                                    <textarea rows="5" name="orderNotes" placeholder="Order notes"></textarea>
                                </div>
                                <div class="form-group">
                                    <label>Payment Method:</label><br>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="creditCard" value="Razor Pay">
                                        <label class="form-check-label" for="creditCard">RazorPay</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="paypal" value="Wallet">
                                        <label class="form-check-label" for="paypal">wallet</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="cashOnDelivery" value="Cash On Delivery">
                                        <label class="form-check-label" for="cashOnDelivery">Cash On Delivery</label>
                                    </div>
                                    <div id="PaymentTypeError" class="error" style="color: red;"></div>
                                </div>
                                <button type="button" class="btn btn-fill-out btn-block mt-30" onclick="placeOrder('<%= cart._id %>','<%= user.email%>')">Place Order</button>
                            </form>
                    </div>
                    
                </div>
            </div>
        </section>
    </main>
    <!-- Preloader Start -->
    <div id="preloader-active">
        <div class="preloader d-flex align-items-center justify-content-center">
            <div class="preloader-inner position-relative">
                <div class="text-center">
                    <h5 class="mb-5">Now Loading</h5>
                    <div class="loader">
                        <div class="bar bar1"></div>
                        <div class="bar bar2"></div>
                        <div class="bar bar3"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Vendor JS-->
    <script src="/assets/js/vendor/modernizr-3.6.0.min.js"></script>
    <script src="/assets/js/vendor/jquery-3.6.0.min.js"></script>
    <script src="/assets/js/vendor/jquery-migrate-3.3.0.min.js"></script>
    <script src="/assets/js/vendor/bootstrap.bundle.min.js"></script>
    <script src="/assets/js/plugins/slick.js"></script>
    <script src="/assets/js/plugins/jquery.syotimer.min.js"></script>
    <script src="/assets/js/plugins/wow.js"></script>
    <script src="/assets/js/plugins/jquery-ui.js"></script>
    <script src="/assets/js/plugins/perfect-scrollbar.js"></script>
    <script src="/assets/js/plugins/magnific-popup.js"></script>
    <script src="/assets/js/plugins/select2.min.js"></script>
    <script src="/assets/js/plugins/waypoints.js"></script>
    <script src="/assets/js/plugins/counterup.js"></script>
    <script src="/assets/js/plugins/jquery.countdown.min.js"></script>
    <script src="/assets/js/plugins/images-loaded.js"></script>
    <script src="/assets/js/plugins/isotope.js"></script>
    <script src="/assets/js/plugins/scrollup.js"></script>
    <script src="/assets/js/plugins/jquery.vticker-min.js"></script>
    <script src="/assets/js/main.js?v=3.4"></script>
    <script src="/assets/js/shop.js?v=3.4"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <!-- razorpay  -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
    function placeOrder(cartId) {
    const shippingAddressCheckbox = document.querySelector('input[name="shippingAddress"]');
    const shippingAddress = shippingAddressCheckbox.checked;

    let shippingAddressValue = null;
    if (shippingAddress) {
        // Validate shipping address fields
        const street = document.querySelector('input[name="street"]').value;
        const city = document.querySelector('input[name="city"]').value;
        const state = document.querySelector('input[name="state"]').value;
        const country = document.querySelector('select[name="country"]').value;
        const postalCode = document.querySelector('input[name="postalCode"]').value;
        const addressType = document.querySelector('input[name="addressType"]:checked');

        
        if (!street || !city || !state || !country || !postalCode || !addressType) {
            Swal.fire({
                title: 'Error',
                text: 'Please fill in all required shipping address fields',
                icon: 'error'
            });
            return; 
        }

    
        const postalCodeRegex = /^[1-9][0-9]{5}$/; 
        if (!postalCodeRegex.test(postalCode)) {
            Swal.fire({
                title: 'Error',
                text: 'Please enter a valid postal code',
                icon: 'error'
            });
            return; 
        }

        shippingAddressValue = {
            street,
            city,
            state,
            country,
            postalCode,
            addressType: addressType.value
        };
    }
    
    const email = document.querySelector('input[name="email"]').value;
    const cartSubTotal = parseFloat(document.getElementById('totalAmount').innerText.replace('Rs.','').replace('/-',''));
    const totalAmount = cartSubTotal;
    const additionalMobile = document.querySelector('input[name="additionalMobile"]').value;
    const paymentMethodRadio = document.querySelectorAll('input[name="paymentMethod"]');
    
    let paymentMethod = null;
    paymentMethodRadio.forEach(method => {
        if (method.checked) {
            paymentMethod = method.value;
        }
    });

    if (!paymentMethod === '') {
        Swal.fire({
            title: 'Reminder',
            text: 'Payment method pending',
            icon: 'warning'
        });
        return; 
    }
    const orderNotes = document.querySelector('textarea[name="orderNotes"]').value;
    
    const bodyData = {
        cartId,
        additionalMobile,
        paymentMethod,
        orderNotes,
        shippingAddress: shippingAddressValue
    };

    if(paymentMethod == 'Cash On Delivery'){
        fetch('/add/order', {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(bodyData)
    })
    
    .then(response => {
        if (response.status === 200) {
            Swal.fire({
                title:'Order Successfull',
                text:'',
                icon:'success',
                type:'success',
                confirmButtonColor: '#4CAF50',
                confirmButtonText: 'Order Summary'
            });
            setTimeout(() => {
                window.location.href = '/orders';
            }, 2000);
        } else if (response.status === 400) {   
        response.json().then(data => {
            if (data.message === 'User does not have a default address') {
                Swal.fire({
                    title: 'Warning',
                    text: 'User does not have a default address. Please set a default address.',
                    icon: 'warning'
                });
            } else {               
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while processing your request',
                    icon: 'error'
                });
            }
        });
        }else{
                Swal.fire({
                title: 'Error',
                text: 'Failed to order',
                icon: 'error'
            });
        }
    })
    .catch(error => {
        console.log(error.message);
        Swal.fire({
            title: 'Error',
            text: 'Failed to proceed checkout',
            icon: 'error'
        });
    });
}else if(paymentMethod === 'Razor Pay'){
    initiateRazorPayPayment(cartId,totalAmount,email);
}else if(paymentMethod === 'Wallet'){
    initiateWalletPayment(cartId,totalAmount,email);
}else {
     Swal.fire({
        title:'Error',
        text:'Please select payment method',
        icon:'error'
     });
     return;
    }
}    

//************************************orderWithWallet************************************************
function initiateWalletPayment(cartId, billTotal) {
    fetch('/create/wallet-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            cartId,
            billTotal
        })
    })
    .then(response => {
        if (response.status === 200) {
            placeOrderAfterPaymentWithWallet(cartId);
        } else if (response.status === 400) {
            Swal.fire({
                title: 'Insufficient balance',
                text: 'Please choose different payment method',
                icon: 'error'
            });
        } else {
            throw new Error('Failed to create wallet order');
        }
    })
    .catch(error => {
        console.error('Error creating wallet order:', error);
    });
}


//************************************orderWithRazorPay************************************************
function initiateRazorPayPayment(cartId,billTotal, email){
    fetch('/create/razorypay-order',{
        method:'POST',
        headers:{
            'Content-Type':'application/json',
        },
        body:JSON.stringify({
            cartId:cartId,
            billTotal,
            email
        })
    })
    .then(response => response.json())
    .then(data =>{
        const options = {
            key:'rzp_test_45Ta17CKiww25f',
            amount: billTotal * 100,
            order_id: data.id,
            name:'BOOKHUB',
            description: 'Payment for Order',
            handler: function (response) {
                console.log('payment successfull', response);
                placeOrderAfterPayment(cartId);
            },
            prefill:{
                email: email
            },
            theme:{
                color:'#F37254'
            }
        };
        // console.log('amount',amount);
        const rzp = new Razorpay(options);
        rzp.open();
    })
    .catch(error => {
        console.error('Error creating RazorPay order:', error);
    })
}


// Function to place order after successful payment
function placeOrderAfterPayment(cartId){
    const shippingAddressCheckbox = document.querySelector('input[name="shippingAddress"]');
    const shippingAddress = shippingAddressCheckbox.checked;

    let shippingAddressValue = null;
    if (shippingAddress) {
        // Validate shipping address fields
        const street = document.querySelector('input[name="street"]').value;
        const city = document.querySelector('input[name="city"]').value;
        const state = document.querySelector('input[name="state"]').value;
        const country = document.querySelector('select[name="country"]').value;
        const postalCode = document.querySelector('input[name="postalCode"]').value;
        const addressType = document.querySelector('input[name="addressType"]:checked');

        
        if (!street || !city || !state || !country || !postalCode || !addressType) {
            Swal.fire({
                title: 'Error',
                text: 'Please fill in all required shipping address fields',
                icon: 'error'
            });
            return; 
        }

    
        const postalCodeRegex = /^[1-9][0-9]{5}$/; 
        if (!postalCodeRegex.test(postalCode)) {
            Swal.fire({
                title: 'Error',
                text: 'Please enter a valid postal code',
                icon: 'error'
            });
            return; 
        }

        shippingAddressValue = {
            street,
            city,
            state,
            country,
            postalCode,
            addressType: addressType.value
        };
    }
    
    const email = document.querySelector('input[name="email"]').value;
    const cartSubTotal = parseFloat(document.getElementById('totalAmount').innerText.replace('Rs.','').replace('/-',''));
    const totalAmount = cartSubTotal;
    const additionalMobile = document.querySelector('input[name="additionalMobile"]').value;
    const paymentMethodRadio = document.querySelectorAll('input[name="paymentMethod"]');
    
    let paymentMethod = null;
    paymentMethodRadio.forEach(method => {
        if (method.checked) {
            paymentMethod = method.value;
        }
    });

    if (!paymentMethod === '') {
        Swal.fire({
            title: 'Reminder',
            text: 'Payment method pending',
            icon: 'warning'
        });
        return; 
    }
    const orderNotes = document.querySelector('textarea[name="orderNotes"]').value;
    
    const bodyData = {
        cartId,
        additionalMobile,
        paymentMethod,
        orderNotes,
        shippingAddress: shippingAddressValue
    };

    fetch('/add/order/razorpay',{
        method:'PUT',
        headers:{
            'Content-Type':'application/json'
        },
        body:JSON.stringify(bodyData)
    })
    .then(response => {
        if (response.status === 200) {
            Swal.fire({
                title:'Order Successfull',
                text:'',
                icon:'success',
                type:'success',
                confirmButtonColor: '#4CAF50',
                confirmButtonText: 'Order Summary'
            });
            setTimeout(() => {
                window.location.href = '/orders';
            }, 2000);
        } else if (response.status === 400) {   
        response.json().then(data => {
            if (data.message === 'User does not have a default address') {
                Swal.fire({
                    title: 'Warning',
                    text: 'User does not have a default address. Please set a default address.',
                    icon: 'warning'
                });
            } else {               
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while processing your request',
                    icon: 'error'
                });
            }
        });
        }else{
                Swal.fire({
                title: 'Error',
                text: 'Failed to order',
                icon: 'error'
            });
        }
    })
    .catch(error => {
        console.error('Error creating wallet order:', error);
    })
}




function placeOrderAfterPaymentWithWallet(cartId){
    const shippingAddressCheckbox = document.querySelector('input[name="shippingAddress"]');
    const shippingAddress = shippingAddressCheckbox.checked;

    let shippingAddressValue = null;
    if (shippingAddress) {
        // Validate shipping address fields
        const street = document.querySelector('input[name="street"]').value;
        const city = document.querySelector('input[name="city"]').value;
        const state = document.querySelector('input[name="state"]').value;
        const country = document.querySelector('select[name="country"]').value;
        const postalCode = document.querySelector('input[name="postalCode"]').value;
        const addressType = document.querySelector('input[name="addressType"]:checked');

        
        if (!street || !city || !state || !country || !postalCode || !addressType) {
            Swal.fire({
                title: 'Error',
                text: 'Please fill in all required shipping address fields',
                icon: 'error'
            });
            return; 
        }

    
        const postalCodeRegex = /^[1-9][0-9]{5}$/; 
        if (!postalCodeRegex.test(postalCode)) {
            Swal.fire({
                title: 'Error',
                text: 'Please enter a valid postal code',
                icon: 'error'
            });
            return; 
        }

        shippingAddressValue = {
            street,
            city,
            state,
            country,
            postalCode,
            addressType: addressType.value
        };
    }
    
    const email = document.querySelector('input[name="email"]').value;
    const cartSubTotal = parseFloat(document.getElementById('totalAmount').innerText.replace('Rs.','').replace('/-',''));
    const totalAmount = cartSubTotal;
    const additionalMobile = document.querySelector('input[name="additionalMobile"]').value;
    const paymentMethodRadio = document.querySelectorAll('input[name="paymentMethod"]');
    
    let paymentMethod = null;
    paymentMethodRadio.forEach(method => {
        if (method.checked) {
            paymentMethod = method.value;
        }
    });

    if (!paymentMethod === '') {
        Swal.fire({
            title: 'Reminder',
            text: 'Payment method pending',
            icon: 'warning'
        });
        return; 
    }
    const orderNotes = document.querySelector('textarea[name="orderNotes"]').value;
    
    const bodyData = {
        cartId,
        additionalMobile,
        paymentMethod,
        orderNotes,
        shippingAddress: shippingAddressValue
    };

    fetch('/add/order/wallet',{
        method:'PUT',
        headers:{
            'Content-Type':'application/json'
        },
        body:JSON.stringify(bodyData)
    })
    .then(response => {
        if (response.status === 200) {
            Swal.fire({
                title:'Order Successfull',
                text:'',
                icon:'success',
                type:'success',
                confirmButtonColor: '#4CAF50',
                confirmButtonText: 'Order Summary'
            });
            setTimeout(() => {
                window.location.href = '/orders';
            }, 2000);
        } else if (response.status === 400) {   
        response.json().then(data => {
            if (data.message === 'User does not have a default address') {
                Swal.fire({
                    title: 'Warning',
                    text: 'User does not have a default address. Please set a default address.',
                    icon: 'warning'
                });
            } else {               
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while processing your request',
                    icon: 'error'
                });
            }
        });
        }else{
                Swal.fire({
                title: 'Error',
                text: 'Failed to order',
                icon: 'error'
            });
        }
    })
    .catch(error => {
        console.error('Error creating wallet order:', error);
    })
}



//*****************TO-GET-ADDITIONAL-NUMBER---------------------//
document.getElementById("additionalMobile").addEventListener("input", function() {
    let currentValue = this.value;
    if (!currentValue.startsWith("+91 ")) {
        this.value = "+91 " + currentValue;
    }
});


//*****************TO-REMOVE-PRODUCT-FROM-THE-CHECKOUT---------------------//
function removeProductFromOrder(productId, userId) {
        swal.fire({
            title: "Are you sure?",
            text: "Do you want to remove this product",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/remove/orders', {
                        method: "PATCH",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            productId,
                            userId
                        })
                    })
                    .then((response) => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error('Network response was not ok.');
                        }
                    })
                    .then((data) => {
                        if (data.success) {
                            swal.fire({
                                title: 'Product Removed',
                                text: '',
                                icon: "success",
                                type: 'success',
                                timer: 1500,
                                timerProgressBar: true,
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            swal.fire('Error Deleting product', data.message, 'error');
                        }
                    })
                    .catch((error) => {
                        swal.fire('Error', 'An error occurred while removing the product.', 'error');
                        console.error('Fetch Error:', error);
                    });
            }
        });
    }

//*****************TO-UPDATE-QUANTITY-IN-CHEKOUT---------------------//
    async function updateInQuantity(productId, userId, newQuantity) {
            try {
                let res = await fetch('product/quantity', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId,
                        userId,
                        newQuantity
                    })
                });
                
                if (res.ok) {
                    const data = await res.json();
                    console.log(data);
                    document.getElementById(`quantity-${productId}`).value = newQuantity;
                    document.getElementById(`price-${productId}`).innerHTML = `Rs.${data.newPrice.toFixed(2)}/-`;
                    const remainingStockElement = document.getElementById(`countInStock-${productId}`);
                    remainingStockElement.innerText = `Stock Left: ${data.countInStock}`;

                    if (data.billTotal !== undefined) {
                        document.getElementById('billTotal').innerHTML = `Rs.${data.billTotal.toFixed(2)}/-`;
                         document.getElementById('totalAmount').innerHTML = `Rs.${data.billTotal.toFixed(2)}/-`;
                    }
                    console.log(billTotal);
                    
                                       
                    await Swal.fire({
                        title: 'Success',
                        text: 'Quantity updated successfully.',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 1500 
                    });
                } else {
                    const data = await res.json();
                if (res.status === 404 ) {
                await Swal.fire({
                    title: 'Limit Excceded',
                    text: 'You cannot add more than 5 quantities', 
                    icon: 'error',
                    showConfirmButton: true
                });
                window.location.reload();
            } else if(res.status === 400 && data.error === "OutOfStock"){
                await Swal.fire({
                   title: 'Sorry😞',
                   text: 'Product is out of stock',
                   icon: 'error',
                   showConfirmButton: true
            });
              window.location.reload();
    
            } 
        }
        }catch (error) {
            console.error('Error:', error);
        }
    }

//*****************APPLY-COUPON---------------------//
async function applycoupon(){
    const requestData = {
        coupon:document.querySelector('input[name="coupon"]').value
    }

    try{
        const response = await fetch('/apply/coupon',{
            method:'POST',
            headers:{
                'Content-Type': 'application/json'
            },
            body:JSON.stringify(requestData)
        })

        const responseData = await response.json();

        if(response.status === 200){
            toastr.success('Coupon applied successfully', '', {
                positionClass: 'toast-bottom-center' 
            });

            const totalAmountElement = document.getElementById('totalAmount');
            const shippingCharge = document.getElementById('shipping');
            const newTotalAmount = parseFloat(totalAmountElement.textContent.split('Rs.')[1].split('/-')[0] - responseData.discount);
            totalAmountElement.textContent = `Rs. ${newTotalAmount.toFixed(2)}/-`;
            shippingCharge.textContent = `You saved Rs.${responseData.discount}/-`
            // setTimeout(() => {
            //     window.location.reload();
            // },1500)
        }else if(response.status === 400){
            if(responseData.message === 'Coupon code is Invalid'){
                toastr.warning('See Why','Coupon code is Invalid',{
                    positionClass: 'toast-bottom-center',
                    onclick: () => {
                       //to show details..
                        toastr.info('The coupon code can only be redeemed once.You have already used this code ', '', {
                            positionClass: 'toast-bottom-center',
                            timeOut: 3000,
                        });
                    } 
                })
            }else if(responseData.message === 'Coupon is not applicable'){
                toastr.warning('See Why','Coupon is not applicable',{
                    positionClass: 'toast-bottom-center',
                    onclick: () => {
                        toastr.info('Please check that coupon is applicable for your requirements before applying the coupon code', '', {
                            positionClass: 'toast-bottom-center',
                            timeOut: 5000,
                        });
                    } 
                });
            }else {
                toastr.error('Coupon code does not exists', '', {
                    positionClass: 'toast-bottom-center' 
                });
            }
        }else{
            toastr.error('Failed to apply coupon', '', {
                positionClass: 'toast-bottom-center' 
            });
        }

    }catch(error){
        toastr.error('An error occurred while adding coupon', '', {
            positionClass: 'toast-bottom-center' 
        });
    }
}
</script>
</body>
</html>